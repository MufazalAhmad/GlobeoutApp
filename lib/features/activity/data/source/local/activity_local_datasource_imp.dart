////********** AUTOGENERATED FILE: DO NOT REMOVE ANY COMMENT IN THIS STYLE **********////
////********** START IMPORTS **********////
import 'package:globout/features/activity/data/entities/event/event.dart';
import 'package:globout/features/activity/data/entities/event/event_hive/event_hive.dart';
import 'package:hive_flutter/hive_flutter.dart';
import 'package:injectable/injectable.dart';
import 'package:logger/logger.dart';
import '../../../../../helpers/persistence/persistence_helper.dart';
import '../../../../../util/exceptions/exceptions.dart';
import '../../../domain/models/event.dart';
import '../../../domain/usecases/cache_create_event.dart';
import 'activity_local_datasource.dart';
import '../../../domain/usecases/get_cached_events.dart';
import '../../../domain/usecases/update_cached_event.dart';
////********** END IMPORTS **********////

const _EVENT_BOX_NAME = 'events';

@LazySingleton(as: ActivityLocalDataSource)
class ActivityLocalDataSourceImp implements ActivityLocalDataSource {
  final Logger _logger;
  final PersistenceHelper _persistenceHelper;

  ActivityLocalDataSourceImp({
    required Logger logger,
    required PersistenceHelper persistenceHelper,
  })  : _logger = logger,
        _persistenceHelper = persistenceHelper;

////********** START METHODS **********////
  @override
  Future<CacheCreateEventUsecaseOutput> cacheCreateEvent(
      CacheCreateEventUsecaseInput input) async {
    try {
      final HiveEventEntity entity = HiveEventEntity(
        id: input.id,
        createdAt: DateTime.now().toIso8601String(),
        userId: input.createEventInput.userId,
        activities: input.createEventInput.activities,
        inMinutes: input.createEventInput.inMinutes,
        forHours: input.createEventInput.forHours,
        forAllFriends: input.createEventInput.forAllFriends,
        lat: input.createEventInput.lat,
        lng: input.createEventInput.lng,
        updatedTime: DateTime.now().toIso8601String(),
        user: input.userEntity,
      );
      final eventBox = await Hive.openBox(_EVENT_BOX_NAME);
      await eventBox.put(input.id, entity);
      eventBox.close();
      return CacheCreateEventUsecaseOutput();
    } catch (e) {
      throw SomethingWentWrongException;
    }
  }

  /// [GetEventsCachedUsecaseInput] is received to [getEventsFromHive] method as parameter
  /// [GetEventsCachedUsecaseOutput] is returned from [getEventsFromHive] method
  @override
  Future<GetEventsCachedUsecaseOutput> getEventsFromHive(
      GetEventsCachedUsecaseInput input) async {
    try {
      final data = await Hive.openBox(_EVENT_BOX_NAME);
      final list = List<EventEntity>.from(data.values);
      final events = list.map((e) => EventModel.fromEntity(e)).toList();
      data.close();

      return GetEventsCachedUsecaseOutput(events: events);
    } catch (e) {
      throw SomethingWentWrongException();
    }
  }

  /// [UpdateCachedEventUsecaseInput] is received to [updateCachedEvent] method as parameter
  /// [UpdateCachedEventUsecaseOutput] is returned from [updateCachedEvent] method
  @override
  Future<UpdateCachedEventUsecaseOutput> updateCachedEvent(
      UpdateCachedEventUsecaseInput input) async {
    try {
      final HiveEventEntity entity = HiveEventEntity(
        id: input.id,
        createdAt: DateTime.now().toIso8601String(),
        userId: input.updateEventInput.userId,
        activities: input.updateEventInput.activities,
        inMinutes: input.updateEventInput.inMinutes,
        forHours: input.updateEventInput.forHours,
        forAllFriends: input.updateEventInput.forAllFriends,
        lat: input.updateEventInput.lat,
        lng: input.updateEventInput.lng,
        updatedTime: DateTime.now().toIso8601String(),
        user: input.userEntity,
      );
      final eventBox = await Hive.openBox(_EVENT_BOX_NAME);
      await eventBox.put(input.id, entity);
      eventBox.close();
      return UpdateCachedEventUsecaseOutput();
    } catch (e) {
      throw SomethingWentWrongException;
    }
  }

////********** END METHODS **********////
}
